/******************************************************************************
	Description
		FreeRTOS. Original code generated by CubeMX.
    Log
		11/23/17 Nickel Liang	First Draft
        11/25/17 Yuan Ma
		12/05/17 Nickel Liang   Minor improvements
                                Add LED, Buzzer, Key press
                                Standard Function Naming: RM_{Peripheral}_{Name}
        12/06/17 Nickel Liang   Add DBUS Support
        12/19/17 Ruihao Yao & Ke Sun  Add functions to implement chassis control instructions
        01/02/18 Nickel Liang   Include lib change
        01/03/18 Nickel Liang   Add GPIO test
	    01/20/18 Ke Sun & Haoyang Zhang Modified RTOS
        04/09/18 Ke Sun         Add comment and function header, osTimer modified
*******************************************************************************
    NOTE
        Please add log above if you change anything in this file.
        This file is expected to change very very frequently,
        so please keep tracking what you modified so other people can have a
        better idea when they debug their program
*******************************************************************************/

/******************************************************************************
    INCLUDES
*******************************************************************************/
#include <dbus.h>
#include <key.h>
#include "FreeRTOS.h"
#include "task.h"
#include "cmsis_os.h"
/* USER INCLUDES */
#include "mytype.h"
#include "taskIMU.h"
#include "taskGimbal.h"
#include "taskChassis.h"
#include "taskLauncher.h"
#include "taskProtocol.h"
//
#include <math.h>
/******************************************************************************
    VARIABLES
*******************************************************************************/
osThreadId initialTaskHandle;

osThreadId IMUTaskHandle;
osThreadId launcherTaskHandle;
osThreadId ProrocolaskHandle;

osTimerId chassis_timer_id;
osTimerId gimbal_timer_id;

/******************************************************************************
    FUNCTIONS
*******************************************************************************/
void StartInitialTask(void const * argument);
extern void MX_FATFS_Init(void);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */



/******************************************************************************
	Input:
	Output
	Description
		FREERTOS INIT
	Log
		2018/04/08 Ke Sun
*******************************************************************************/
void MX_FREERTOS_Init(void) {
    osTimerDef(ChassisTimer, StartChassisTask); // create chassis timer
    chassis_timer_id = osTimerCreate(osTimer(ChassisTimer), osTimerPeriodic, NULL);

    osTimerDef(gimTimer, StartGimbalTask); // create gimbal timer
    gimbal_timer_id = osTimerCreate(osTimer(gimTimer), osTimerPeriodic,NULL);

    /* Create the thread(s) */
    /* definition and creation of initialTask */
    osThreadDef(initialTask, StartInitialTask, osPriorityAboveNormal, 0, 128);
    initialTaskHandle = osThreadCreate(osThread(initialTask), NULL);

    /* high priority task */
    osThreadDef(IMUTask, StartIMUTask, osPriorityNormal, 0, 128);
    IMUTaskHandle = osThreadCreate(osThread(IMUTask), NULL);

    osThreadDef(ProtocolTask, StartProtocolTask, osPriorityNormal, 0, 128);
    ProrocolaskHandle = osThreadCreate(osThread(ProtocolTask), NULL);

    osThreadDef(launcherTask, StartLauncherTask, osPriorityNormal, 0, 128);
    launcherTaskHandle = osThreadCreate(osThread(launcherTask), NULL);

}

/******************************************************************************
	Input:
	Output
	Description
		initialization task
        this task will be suspended upon completition
	Log
		2018/04/08 Ke Sun
*******************************************************************************/
void StartInitialTask(void const * argument) {
    uint32_t tickStart = HAL_GetTick();
    /******************************
    OS INITIALIZATION
    ******************************/
    MX_FATFS_Init();

    /******************************
    PERIPHERALS INITIALIZATION
    ******************************/
    RM_BUZZER_Init();   // BUZZER Initialization
    RM_DBUS_Init();     // DBUS Initialization
    RM_CAN_InitCAN1();  // CAN1 Initialization
    RM_CAN_InitCAN2();  // CAN2 Initialization
    RM_IMU_Onboard_Init(); // Onboard IMU Initialization
    RM_PRINTF("Start Default Task\r\n");

    /******************************
    TASKS INITIALIZATION
    ******************************/
    /* PID Initialize */
    // for chassis
    for (int i = 0; i < 4; i++) {
        PID_struct_init(&pid_spd[i], POSITION_PID, 10000/2, 3000, 8.0f, 2.0f, 0.0f, 0.0f);  //4 motors angular rate closeloop.
    }
    PID_struct_init(&pid_rotation, CHASSISS_ROTATE, 2000, 2000, 5.0f, 0.0f, 0.0f, 0.0f);    //for rotation PID
    // for gimbal Init
    GimbalPIDSetMode(GIMBAL_AUTO_SHOOT);
    GimbalPIDAutoSet(5);
    // for launcher
    LauncherPIDSetMode(false);


    /******************************
    SYSTEM IS READY
    ******************************/
    RM_LED_RedOff();
    RM_LED_GreenOn();
    RM_LASER_On();
    RM_BUZZER_SingSong(Startup, 1);
    RM_PRINTF("System Ready.\r\n");
    osTimerStart(gimbal_timer_id, GIMBAL_PERIOD);
    osTimerStart(chassis_timer_id, CHASSIS_PERIOD);
    // RM_DEBUG_GPIO_Test();
    RM_PRINTF("TIME ELAPSED %d\r\n",HAL_GetTick()-tickStart);

    //create individial tasks
    /*  */
	osThreadSuspend(initialTaskHandle);
}
